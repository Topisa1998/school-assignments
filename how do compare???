class Fraction:
    """ This class represents one single fraction that consists of
        numerator and denominator """

    def __init__(self, numerator, denominator):
        """
        Constructor. Checks that the numerator and denominator are of
        correct type and initializes them.

        :param numerator: fraction's numerator
        :param denominator: fraction's denominator
        """

        if not isinstance(numerator, int) or not isinstance(denominator, int):
            raise TypeError
        elif denominator == 0:
            raise ValueError

        self.__numerator = numerator
        self.__denominator = denominator


    def return_string(self):
        """ Returns a string-presentation of the fraction in the format
        numerator/denominator """

        if self.__numerator * self.__denominator < 0:
            sign = "-"
        else:
            sign = ""
        return "{:s}{:d}/{:d}".format(sign, abs(self.__numerator),
                                      abs(self.__denominator))

    def simplify(self):
        self.__commondividor = greatest_common_divisor(self.__numerator,
                                                       self.__denominator)
        self.__numerator = int(self.__numerator / self.__commondividor)
        self.__denominator = int(self.__denominator / self.__commondividor)

    def complement(self):
        complement = Fraction(self.__numerator, self.__denominator)
        complement.__numerator = -1*self.__numerator
        complement.__denominator = self.__denominator
        return complement

    def reciprocal(self):
        reciprocal = Fraction(self.__numerator, self.__denominator)
        reciprocal.__denominator = self.__numerator
        reciprocal.__numerator = self.__denominator
        return reciprocal

    def multiply(self, fraction2):
        multiplication = Fraction(self.__numerator, self.__denominator)
        multiplication.__numerator = self.__numerator*fraction2.__numerator
        multiplication.__denominator = self.__denominator*fraction2.__denominator
        return multiplication

    def divide(self, fraction2):
        quotient = Fraction(self.__numerator, self.__denominator)
        quotient = quotient.reciprocal().multiply(fraction2).reciprocal()
        return quotient

    def add(self, fraction2):
        sum = Fraction(self.__numerator, self.__denominator)
        temp = self.__denominator
        nimittaja1 = self.__denominator*fraction2.__denominator
        osoittaja1 = self.__numerator*fraction2.__denominator
        nimittaja2 = fraction2.__denominator*temp
        osoittaja2 = fraction2.__numerator*temp
        sum.__numerator = osoittaja1+osoittaja2
        sum.__denominator = nimittaja1
        return sum

    def deduct(self, fraction2):
        difference = Fraction(self.__numerator, self.__denominator)
        temp = self.__denominator
        nimittaja1 = self.__denominator * fraction2.__denominator
        osoittaja1 = self.__numerator * fraction2.__denominator
        nimittaja2 = fraction2.__denominator * temp
        osoittaja2 = fraction2.__numerator * temp
        difference.__numerator = osoittaja1 - osoittaja2
        difference.__denominator = nimittaja1
        return difference

    def __lt__(self, other):
        

    def __gt__(self, frac2):
        

def greatest_common_divisor(a, b):
    """
    Euclidean algorithm.
    """

    while b != 0:
        a, b = b, a % b
    return a

